import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Badge } from '../components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { \n  Users, \n  Plus, \n  Search, \n  Edit, \n  Trash2,\n  Eye, \n  EyeOff,\n  UserCheck,\n  UserX,\n  Shield,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\nconst UserManagement = ({ language = 'pt' }) => {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const { user: currentUser } = useAuth();\n\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    full_name: '',\n    password: '',\n    role: 'staff'\n  });\n\n  const t = {\n    pt: {\n      userManagement: 'Gestão de Utilizadores',\n      addUser: 'Adicionar Utilizador',\n      searchUsers: 'Procurar utilizadores...',\n      username: 'Nome de Utilizador',\n      email: 'Email',\n      fullName: 'Nome Completo',\n      password: 'Password',\n      role: 'Função',\n      admin: 'Administrador',\n      staff: 'Staff',\n      status: 'Status',\n      active: 'Ativo',\n      inactive: 'Inativo',\n      save: 'Guardar',\n      cancel: 'Cancelar',\n      edit: 'Editar',\n      delete: 'Eliminar',\n      activate: 'Ativar',\n      deactivate: 'Desativar',\n      confirmDelete: 'Tem certeza que deseja eliminar este utilizador?',\n      userAdded: 'Utilizador adicionado com sucesso!',\n      userUpdated: 'Utilizador atualizado com sucesso!',\n      userDeleted: 'Utilizador eliminado com sucesso!',\n      userActivated: 'Utilizador ativado com sucesso!',\n      userDeactivated: 'Utilizador desativado com sucesso!',\n      noUsers: 'Nenhum utilizador encontrado',\n      createdAt: 'Criado em',\n      lastLogin: 'Último Login',\n      actions: 'Ações',\n      totalUsers: 'Total de Utilizadores',\n      activeUsers: 'Utilizadores Ativos',\n      adminUsers: 'Administradores'\n    },\n    en: {\n      userManagement: 'User Management',\n      addUser: 'Add User',\n      searchUsers: 'Search users...',\n      username: 'Username',\n      email: 'Email',\n      fullName: 'Full Name',\n      password: 'Password',\n      role: 'Role',\n      admin: 'Administrator',\n      staff: 'Staff',\n      status: 'Status',\n      active: 'Active',\n      inactive: 'Inactive',\n      save: 'Save',\n      cancel: 'Cancel',\n      edit: 'Edit',\n      delete: 'Delete',\n      activate: 'Activate',\n      deactivate: 'Deactivate',\n      confirmDelete: 'Are you sure you want to delete this user?',\n      userAdded: 'User added successfully!',\n      userUpdated: 'User updated successfully!',\n      userDeleted: 'User deleted successfully!',\n      userActivated: 'User activated successfully!',\n      userDeactivated: 'User deactivated successfully!',\n      noUsers: 'No users found',\n      createdAt: 'Created At',\n      lastLogin: 'Last Login',\n      actions: 'Actions',\n      totalUsers: 'Total Users',\n      activeUsers: 'Active Users',\n      adminUsers: 'Administrators'\n    }\n  };\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API}/users`);\n      setUsers(response.data);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      toast.error('Erro ao carregar utilizadores');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      if (editingUser) {\n        await axios.put(`${API}/users/${editingUser.id}`, formData);\n        toast.success(t[language].userUpdated);\n      } else {\n        await axios.post(`${API}/users`, formData);\n        toast.success(t[language].userAdded);\n      }\n      \n      setShowAddDialog(false);\n      setEditingUser(null);\n      resetForm();\n      fetchUsers();\n    } catch (error) {\n      console.error('Error saving user:', error);\n      const message = error.response?.data?.detail || 'Erro ao guardar utilizador';\n      toast.error(message);\n    }\n  };\n\n  const handleEdit = (user) => {\n    setEditingUser(user);\n    setFormData({\n      username: user.username || '',\n      email: user.email || '',\n      full_name: user.full_name || '',\n      password: '', // Don't populate password for editing\n      role: user.role || 'staff'\n    });\n    setShowAddDialog(true);\n  };\n\n  const handleToggleStatus = async (userId) => {\n    try {\n      const response = await axios.put(`${API}/users/${userId}/toggle-status`);\n      toast.success(response.data.message);\n      fetchUsers();\n    } catch (error) {\n      console.error('Error toggling user status:', error);\n      const message = error.response?.data?.detail || 'Erro ao alterar status do utilizador';\n      toast.error(message);\n    }\n  };\n\n  const handleDelete = async (userId) => {\n    if (window.confirm(t[language].confirmDelete)) {\n      try {\n        await axios.delete(`${API}/users/${userId}`);\n        toast.success(t[language].userDeleted);\n        fetchUsers();\n      } catch (error) {\n        console.error('Error deleting user:', error);\n        const message = error.response?.data?.detail || 'Erro ao eliminar utilizador';\n        toast.error(message);\n      }\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      username: '',\n      email: '',\n      full_name: '',\n      password: '',\n      role: 'staff'\n    });\n  };\n\n  const getRoleIcon = (role) => {\n    return role === 'admin' ? \n      <Shield size={16} className=\"text-red-600\" /> : \n      <User size={16} className=\"text-blue-600\" />;\n  };\n\n  const getStatusVariant = (isActive) => {\n    return isActive ? 'default' : 'secondary';\n  };\n\n  const filteredUsers = users.filter(user => \n    user.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.full_name?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getUserStats = () => {\n    const totalUsers = users.length;\n    const activeUsers = users.filter(u => u.is_active).length;\n    const adminUsers = users.filter(u => u.role === 'admin').length;\n    \n    return { totalUsers, activeUsers, adminUsers };\n  };\n\n  const stats = getUserStats();\n\n  return (\n    <div className=\"p-6 space-y-6 fade-in\">\n      {/* Header */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-4 lg:mb-0\">\n          {t[language].userManagement}\n        </h1>\n        \n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"btn-hover\"\n              onClick={() => {\n                setEditingUser(null);\n                resetForm();\n              }}\n              data-testid=\"add-user-btn\"\n            >\n              <Plus className=\"mr-2\" size={16} />\n              {t[language].addUser}\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingUser ? t[language].edit : t[language].addUser}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\">{t[language].username} *</Label>\n                <Input\n                  id=\"username\"\n                  value={formData.username}\n                  onChange={(e) => setFormData({...formData, username: e.target.value})}\n                  required\n                  data-testid=\"user-username\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">{t[language].email} *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({...formData, email: e.target.value})}\n                  required\n                  data-testid=\"user-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"full_name\">{t[language].fullName} *</Label>\n                <Input\n                  id=\"full_name\"\n                  value={formData.full_name}\n                  onChange={(e) => setFormData({...formData, full_name: e.target.value})}\n                  required\n                  data-testid=\"user-fullname\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">\n                  {t[language].password} {editingUser ? '(deixar vazio para manter)' : '*'}\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={formData.password}\n                    onChange={(e) => setFormData({...formData, password: e.target.value})}\n                    required={!editingUser}\n                    className=\"pr-10\"\n                    data-testid=\"user-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n                  >\n                    {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                  </button>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"role\">{t[language].role} *</Label>\n                <Select \n                  value={formData.role} \n                  onValueChange={(value) => setFormData({...formData, role: value})}\n                >\n                  <SelectTrigger data-testid=\"user-role\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"staff\">{t[language].staff}</SelectItem>\n                    <SelectItem value=\"admin\">{t[language].admin}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowAddDialog(false)}\n                >\n                  {t[language].cancel}\n                </Button>\n                <Button type=\"submit\" data-testid=\"save-user-btn\">\n                  {t[language].save}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                  {t[language].totalUsers}\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.totalUsers}</p>\n              </div>\n              <div className=\"p-3 rounded-full bg-blue-500\">\n                <Users size={24} className=\"text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                  {t[language].activeUsers}\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.activeUsers}</p>\n              </div>\n              <div className=\"p-3 rounded-full bg-green-500\">\n                <UserCheck size={24} className=\"text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600 mb-1\">\n                  {t[language].adminUsers}\n                </p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.adminUsers}</p>\n              </div>\n              <div className=\"p-3 rounded-full bg-red-500\">\n                <Shield size={24} className=\"text-white\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"relative max-w-md\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder={t[language].searchUsers}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"users-search\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"mr-2\" />\n            {t[language].userManagement} ({filteredUsers.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4\">\n                  <div className=\"rounded-full bg-gray-200 h-10 w-10\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : filteredUsers.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].username}</th>\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].fullName}</th>\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].email}</th>\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].role}</th>\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].status}</th>\n                    <th className=\"text-left p-4 font-medium text-gray-600\">{t[language].createdAt}</th>\n                    <th className=\"text-right p-4 font-medium text-gray-600\">{t[language].actions}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredUsers.map((user) => (\n                    <tr key={user.id} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"p-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            {getRoleIcon(user.role)}\n                          </div>\n                          <span className=\"font-medium\">{user.username}</span>\n                        </div>\n                      </td>\n                      <td className=\"p-4\">{user.full_name}</td>\n                      <td className=\"p-4\">{user.email}</td>\n                      <td className=\"p-4\">\n                        <Badge variant={user.role === 'admin' ? 'destructive' : 'default'}>\n                          {t[language][user.role]}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4\">\n                        <Badge variant={getStatusVariant(user.is_active)}>\n                          {user.is_active ? t[language].active : t[language].inactive}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4\">\n                        {new Date(user.created_at).toLocaleDateString('pt-PT')}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleEdit(user)}\n                            data-testid={`edit-user-${user.id}`}\n                          >\n                            <Edit size={16} />\n                          </Button>\n                          \n                          {user.id !== currentUser?.id && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleToggleStatus(user.id)}\n                                className={user.is_active ? \"text-orange-600 hover:text-orange-700\" : \"text-green-600 hover:text-green-700\"}\n                                data-testid={`toggle-user-${user.id}`}\n                              >\n                                {user.is_active ? <UserX size={16} /> : <UserCheck size={16} />}\n                              </Button>\n                              \n                              {user.role !== 'admin' && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => handleDelete(user.id)}\n                                  className=\"text-red-600 hover:text-red-700\"\n                                  data-testid={`delete-user-${user.id}`}\n                                >\n                                  <Trash2 size={16} />\n                                </Button>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Users size={48} className=\"mx-auto text-gray-400 mb-4\" />\n              <p className=\"text-gray-600\">{t[language].noUsers}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default UserManagement;